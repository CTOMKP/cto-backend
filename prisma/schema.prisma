// Prisma schema for CTO Marketplace backend
// Datasource: PostgreSQL database named cto_db
// Generator: Prisma Client for TypeScript

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Keeping existing User model shape (Int id) to avoid breaking auth
model User {
  id              Int           @id @default(autoincrement())
  name            String?
  email           String        @unique
  passwordHash    String?
  role            UserRole      @default(USER)
  // OAuth provider fields
  provider        String?
  providerId      String?       @unique
  // Circle identity fields
  circleUserId    String?       @unique
  circleAppId     String?
  circlePinStatus String?
  lastLoginAt     DateTime?

  // Relations
  wallets         Wallet[]
  scanResults     ScanResult[]
  userListings    UserListing[]
  uploadedMemes   Meme[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Extend ScanResult with fields needed by marketplace while retaining Int id
model ScanResult {
  id              Int      @id @default(autoincrement())
  contractAddress String
  resultData      Json
  riskScore       Int?
  tier            String?
  summary         String?
  indexed         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  @@index([contractAddress])
  @@index([userId])
  @@index([riskScore])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum Chain {
  SOLANA
  ETHEREUM
  BSC
  SUI
  BASE
  APTOS
  NEAR
  OSMOSIS
  OTHER
  UNKNOWN
}

enum ListingCategory {
  MEME
  DEFI
  NFT
  OTHER
  UNKNOWN
}

// Listing table (renamed from MarketplaceListing)
model Listing {
  id              String          @id @default(cuid())
  contractAddress String          @unique
  chain           Chain           @default(SOLANA)
  category        ListingCategory @default(MEME)
  symbol          String?
  name            String?
  summary         String?
  riskScore       Int?
  communityScore  Float?
  tier            String?
  priceUsd        Float?
  change1h        Float?
  change6h        Float?
  change24h       Float?
  liquidityUsd    Float?
  marketCap       Float?
  volume24h       Float?
  holders         Int?
  age             String?
  txCount1h       Int?
  txCount24h      Int?
  metadata        Json?
  lastScannedAt   DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Back-relations

  @@index([chain])
  @@index([category])
  @@index([tier])
  @@index([riskScore])
  @@index([lastScannedAt])
}

// Circle Wallets persisted for users
model Wallet {
  id             String   @id @default(cuid())        // internal id
  circleWalletId String   @unique                     // Circle wallet id
  address        String?
  blockchain     Chain
  type           String?                              // e.g., USER_CONTROLLED
  description    String?

  userId         Int
  user           User     @relation(fields: [userId], references: [id])

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@index([blockchain])
}

// User-created listings
model UserListing {
  id           String   @id @default(cuid())
  userId       Int
  contractAddr String
  chain        String
  title        String
  description  String
  bio          String?
  logoUrl      String?
  bannerUrl    String?
  links        Json?
  status       String   // DRAFT | PUBLISHED | REJECTED
  vettingTier  String
  vettingScore Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user   User     @relation(fields: [userId], references: [id])
  boosts AdBoost[]

  @@index([status])
  @@index([userId])
}

model AdBoost {
  id           String   @id @default(cuid())
  listingId    String
  type         String   // top, priority, bump, spotlight, homepage, urgent
  durationDays Int
  startDate    DateTime @default(now())
  endDate      DateTime
  createdAt    DateTime @default(now())

  // Relations
  listing UserListing @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

// Meme images uploaded by admins (public access)
model Meme {
  id           String   @id @default(cuid())
  filename     String   // Original filename
  s3Key        String   @unique  // S3 object key (memes/filename_timestamp.jpg)
  s3Url        String   // Direct public S3 URL
  size         Int      // File size in bytes
  mimeType     String   // image/jpeg, image/png, etc.
  description  String?  // Optional description
  category     String?  // Optional category/tag
  
  // Admin who uploaded
  uploadedById Int
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([uploadedById])
  @@index([createdAt])
}

// Waitlist emails
model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  
  @@index([createdAt])
}